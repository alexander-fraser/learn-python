# Maze: Recursive
# Alexander Fraser
# 16 February 2020

# A maze generator using recursive division.

"""
Requirements:
- Numpy
- Matplotlib
- Python_05_Maze_Depth_First

The maze is generated by:
1. Starting with an empty space.
2. Creating walls that sub-divide the space.
3. Creating a random opening in the wall.
4. Repeating recursively for all smaller spaces.

The array M is going to hold the array information for each cell.
The four coordinates tell if walls exist on those sides
M(LEFT, DOWN, RIGHT, UP)
"""

import random
import numpy as np
from matplotlib import pyplot as plt
from Python_201_Maze_Depth_First import collect_inputs, generate_maze_image, generate_path_image

def main():
    # Default inputs.
    maze_defaults = {}
    maze_defaults['save_maze'] = 'Recursive Maze 01.png'
    maze_defaults['save_path'] = 'Recursive Maze 01 - Path.png'
    maze_defaults['num_rows'] = 10
    maze_defaults['num_cols'] = 10
    maze_defaults['colour_on'] = 0
    maze_defaults['colour_incrementer'] = 1
    
    maze_inputs = collect_inputs(maze_defaults)   # Collect inputs from user. 
    
    M = generate_recursive_maze(maze_inputs)   # Run the maze generator.
    generate_maze_image(maze_inputs, M)   # Visualize the maze.
    generate_path_image(maze_inputs, M)   # Visualize the maze as a path.

def generate_recursive_maze(maze_inputs):
    # Subdivide the grid and create a hole in the wall.
    num_rows = maze_inputs['num_rows']
    num_cols = maze_inputs['num_cols'] 
    M = np.zeros((num_rows, num_cols, 4), dtype=np.uint8)
    
    dividing_column = random.randint(0, num_cols-1)
    hole_column = random.randint(0, num_rows)
    M[hole_column, dividing_column, 2] = 1
    M[hole_column, dividing_column + 1, 0] = 1

    dividing_row = random.randint(0, num_rows - 1)
    hole_row = random.randint(0, num_cols)
    M[hole_column, dividing_column, 2] = 1
    M[hole_column, dividing_column + 1, 0] = 1

    # Open the walls at the start and finish.
    M[0, 0, 0] = 1   # Left side of top-left-most cell.
    M[num_rows - 1, num_cols - 1, 2] = 1   # Right side of bottom-right-most cell.

    return M

if __name__ == "__main__":
    main()